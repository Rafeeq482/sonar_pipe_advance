name: SonarQube Advanced Pipeline

on:
  workflow_dispatch:

jobs:
  sonarqube-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-south-1
      TF_VAR_key_name: ${{ secrets.TF_VAR_KEY_NAME }}
      TERRAFORM_WORKSPACE: default
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # e.g. http://<public-ip>:9000
      SONAR_ADMIN_TOKEN: ${{ secrets.SONAR_ADMIN_TOKEN }}
      GITHUB_PRIVATE_KEY: ${{ secrets.GITHUB_PRIVATE_KEY }} # for private repo
      GITHUB_REPO: ${{ secrets.GITHUB_REPO }} # e.g. git@github.com:user/repo.git
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

    steps:
      - name: Checkout pipeline repo
        uses: actions/checkout@v3

      - name: Install required tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq ansible python3-pip unzip awscli openjdk-17-jdk
          pip3 install boto3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5
          terraform_wrapper: false

      - name: Terraform Init & Apply (High instance)
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve -var="instance_type=t3.large"

      - name: Capture EC2 Public IP, SG and Subnet
        id: tf_output
        run: |
          cd terraform
          echo "INSTANCE_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV
          echo "SG_ID=$(terraform output -raw security_group_id)" >> $GITHUB_ENV
          echo "SUBNET_ID=$(terraform output -raw subnet_id)" >> $GITHUB_ENV

      - name: Setup SSH key for Ansible
        run: |
          echo "${{ secrets.NEWACC_PRIVATE_KEY }}" > SNS.pem
          chmod 600 SNS.pem

      - name: Wait for SSH to be ready
        run: |
          for i in {1..20}; do
            ssh -o StrictHostKeyChecking=no -i SNS.pem ubuntu@$INSTANCE_IP 'echo ready' && break
            echo "Waiting for instance SSH..."
            sleep 15
          done

      - name: Install SonarQube with Ansible
        run: |
          ansible-playbook -i "$INSTANCE_IP," -u ubuntu --private-key SNS.pem ansible/install-sonarqube.yml

      - name: Clone private repo for scanning
        run: |
          mkdir code && cd code
          GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' git clone $GITHUB_REPO app
          cd app
          ls -la

      - name: Run Sonar Scanner on remote instance
        run: |
          ssh -o StrictHostKeyChecking=no -i SNS.pem ubuntu@$INSTANCE_IP "
            sudo apt-get install -y unzip wget &&
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip &&
            unzip sonar-scanner-cli-5.0.1.3006-linux.zip &&
            export PATH=\$PATH:sonar-scanner-5.0.1.3006-linux/bin &&
            cd /home/ubuntu &&
            git clone $GITHUB_REPO repo &&
            cd repo &&
            sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_ADMIN_TOKEN
          "

      - name: Create AMI from High Instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=ip-address,Values=$INSTANCE_IP" --query 'Reservations[0].Instances[0].InstanceId' --output text)
          AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name "sonarqube-ami-$(date +%Y%m%d%H%M)" --query 'ImageId' --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "Created AMI: $AMI_ID"
          aws ec2 wait image-available --image-ids $AMI_ID
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID

      - name: Launch t2.micro with created AMI
        run: |
          MICRO_ID=$(aws ec2 run-instances --image-id $AMI_ID --instance-type t2.micro --security-group-ids $SG_ID --subnet-id $SUBNET_ID --key-name ${{ secrets.TF_VAR_KEY_NAME }} --query 'Instances[0].InstanceId' --output text)
          echo "MICRO_ID=$MICRO_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --instance-ids $MICRO_ID
          MICRO_IP=$(aws ec2 describe-instances --instance-ids $MICRO_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "SonarQube Dashboard is now available at: http://$MICRO_IP:9000"
