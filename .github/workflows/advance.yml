name: SonarQube Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-south-1
      TF_VAR_key_name: ${{ secrets.TF_VAR_KEY_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install dependencies
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.5

      - name: Install Ansible and dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ansible jq python3-psycopg2

      # Terraform Init & Apply
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      # Capture instance IP output from Terraform
      - name: Get Instance IP
        id: get_ip
        working-directory: terraform
        run: |
          IP=$(terraform output -raw sonarqube_public_ip)
          echo "INSTANCE_IP=$IP" >> $GITHUB_ENV
          echo "Instance IP: $IP"

      # Configure SSH Key from secret
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.NEWACC_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      # Wait for instance SSH to be ready
      - name: Wait for SSH
        run: |
          for i in {1..12}; do
            ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$INSTANCE_IP "echo 'SSH OK'" && break
            echo "Waiting for SSH..."
            sleep 20
          done

      # Run Ansible playbook
      - name: Run Ansible Playbook
        run: ansible-playbook -i "${INSTANCE_IP}," --private-key key.pem ansible/install-sonarqube.yml

      # Example SonarQube Scan step (after deployment)
      - name: Run SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://$INSTANCE_IP:9000

      # Cleanup on failure
      - name: Cleanup (destroy) on failure
        if: failure()
        working-directory: terraform
        run: |
          echo "Pipeline failed — destroying AWS resources..."
          terraform destroy -auto-approve

      # Cleanup on cancel
      - name: Cleanup (destroy) on cancel
        if: cancelled()
        working-directory: terraform
        run: |
          echo "Pipeline cancelled — destroying AWS resources..."
          terraform destroy -auto-approve
