name: SonarQube Deployment & Scan

on:
  push:
    branches:
      - main

jobs:
  deploy-sonarqube:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-south-1
      TF_VAR_key_name: ${{ secrets.TF_VAR_KEY_NAME }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq ansible python3-psycopg2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Apply
        id: tf_apply
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Get SonarQube instance IP
        run: |
            IP=$(terraform output -raw sonarqube_public_ip)
            echo "INSTANCE_IP=$IP" >> $GITHUB_ENV

        working-directory: terraform

      - name: Add SSH Key
        run: |
          echo "${{ secrets.NEWACC_PRIVATE_KEY }}" > SNS.pem
          chmod 600 SNS.pem

      - name: Wait for SSH to be ready
        run: |
          for i in {1..15}; do
            ssh -o StrictHostKeyChecking=no -i SNS.pem ubuntu@$INSTANCE_IP "echo connected" && break
            echo "Waiting for instance to be ready..."
            sleep 20
          done

      - name: Run Ansible Playbook (Install SonarQube)
        run: |
          ansible-playbook -i "$INSTANCE_IP," --private-key SNS.pem ansible/install-sonarqube.yml

      - name: Wait for SonarQube to start
        run: |
          echo "Waiting for SonarQube to start..."
          for i in {1..15}; do
            curl -s http://$INSTANCE_IP:9000/api/system/status | grep -q '"status":"UP"' && break
            sleep 10
          done

      - name: Create SonarQube Token (Runtime)
        id: create_token
        run: |
          # Create admin token dynamically via API
          TOKEN_RESPONSE=$(curl -s -u admin:admin -X POST "http://$INSTANCE_IP:9000/api/user_tokens/generate" -d "name=gh_token_$(date +%s)")
          SONAR_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "Generated token: $SONAR_TOKEN"

      - name: Run SonarQube Scan
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="http://$INSTANCE_IP:9000" \
            -e SONAR_LOGIN="$SONAR_TOKEN" \
            -v "$(pwd):/usr/src" sonarsource/sonar-scanner-cli

      # Cleanup on failure
      - name: Cleanup (destroy) on failure
        if: failure()
        working-directory: terraform
        run: |
          echo "Pipeline failed — destroying AWS resources..."
          terraform destroy -auto-approve

      # Cleanup on cancel
      - name: Cleanup (destroy) on cancel
        if: cancelled()
        working-directory: terraform
        run: |
          echo "Pipeline cancelled — destroying AWS resources..."
          terraform destroy -auto-approve
