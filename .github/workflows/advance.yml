name: Advanced SonarQube Pipeline with Cost Optimization

on:
  workflow_dispatch:

jobs:
  sonarqube-pipeline:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      TF_WORKSPACE: default

    steps:
      # 1. Checkout Code
      - name: Checkout Repo
        uses: actions/checkout@v4

      # 2. Configure AWS Credentials
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      # 4. Terraform Init & Apply (High-tier EC2)
      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Apply (High-tier Instance)
        id: tf_apply
        run: terraform -chdir=terraform apply -auto-approve

      # Capture outputs (Public IP, SG, Subnet)
      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "INSTANCE_IP=$(terraform -chdir=terraform output -raw sonarqube_public_ip)" >> $GITHUB_ENV
          echo "SG_ID=$(terraform -chdir=terraform output -raw security_group_id)" >> $GITHUB_ENV
          echo "SUBNET_ID=$(terraform -chdir=terraform output -raw subnet_id)" >> $GITHUB_ENV

      # 5. Wait for SSH to be ready
      - name: Wait for SSH
        run: |
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -i sonar-key.pem ubuntu@${INSTANCE_IP} "echo ok" 2>/dev/null; then
              echo "SSH is ready!"
              break
            fi
            echo "Waiting for SSH..."
            sleep 10
          done

      # 6. Setup SSH Key
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.NEWACC_PRIVATE_KEY }}" > sonar-key.pem
          chmod 600 sonar-key.pem

      # 7. Run Ansible Playbook to Install SonarQube & Scan Code
      - name: Install SonarQube & Scan
        run: |
          ansible-playbook -i "${INSTANCE_IP}," --private-key sonar-key.pem ansible/install-sonarqube.yml \
            --extra-vars "repo_url=${{ secrets.PRIVATE_REPO_URL }} repo_key=${{ secrets.PRIVATE_REPO_KEY }}"

      # 8. Create AMI from High-tier Instance
      - name: Create AMI
        id: create_ami
        run: |
          AMI_ID=$(aws ec2 create-image --instance-id $(terraform -chdir=terraform output -raw sonarqube_instance_id) --name "sonar-ami-$(date +%s)" --query 'ImageId' --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "Created AMI: $AMI_ID"
          aws ec2 wait image-available --image-ids $AMI_ID

      # 9. Destroy High-tier Instance
      - name: Destroy High-tier Instance
        run: terraform -chdir=terraform destroy -target=aws_instance.sonarqube -auto-approve

      # 10. Launch t2.micro with Created AMI
      - name: Launch Micro Instance
        run: |
          NEW_INSTANCE_ID=$(aws ec2 run-instances --image-id $AMI_ID --count 1 --instance-type t2.micro \
            --security-group-ids $SG_ID --subnet-id $SUBNET_ID \
            --query 'Instances[0].InstanceId' --output text)
          echo "NEW_INSTANCE_ID=$NEW_INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --instance-ids $NEW_INSTANCE_ID
          NEW_INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $NEW_INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "NEW_INSTANCE_IP=$NEW_INSTANCE_IP" >> $GITHUB_ENV
          echo "SonarQube Dashboard is now available at: http://$NEW_INSTANCE_IP:9000"

    # 11. Cleanup if failure occurs
    cleanup:
      if: failure()
      runs-on: ubuntu-latest
      steps:
        - name: Destroy Resources on Failure
          run: terraform -chdir=terraform destroy -auto-approve
