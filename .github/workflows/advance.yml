name: Deploy SonarQube with Terraform and Ansible

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.5
          cli_config_credentials_hostname: app.terraform.io
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: terraform
        run: terraform apply -auto-approve -input=false -no-color -json > tf_apply_output.json

      - name: Get Terraform Outputs
        id: tf_output
        working-directory: terraform
        run: |
          INSTANCE_IP=$(terraform output -raw sonarqube_public_ip)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "SonarQube Public IP: $INSTANCE_IP"

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.NEWACC_PRIVATE_KEY }}" > sns.pem
          chmod 600 sns.pem

      - name: Wait for SSH to be ready
        run: |
          for i in {1..15}; do
            if ssh -o StrictHostKeyChecking=no -i sns.pem ubuntu@${INSTANCE_IP} "echo connected"; then
              echo "SSH is ready!"
              exit 0
            fi
            echo "Waiting for SSH..."
            sleep 15
          done
          echo "SSH failed to start after 4 minutes"
          exit 1

      - name: Run Ansible Playbook
        run: |
          sudo apt-get update && sudo apt-get install -y ansible python3-psycopg2
          ansible-playbook -i "${INSTANCE_IP}," -u ubuntu --private-key sns.pem ansible/install-sonarqube.yml

      - name: Post SonarQube URL
        run: |
            
            echo "SonarQube deployed at: http://${INSTANCE_IP}:9000"

      # Cleanup on failure
      - name: Cleanup (destroy) on failure
        if: failure()
        working-directory: terraform
        run: |
          echo "Pipeline failed — destroying AWS resources..."
          terraform destroy -auto-approve

      # Cleanup on cancel
      - name: Cleanup (destroy) on cancel
        if: cancelled()
        working-directory: terraform
        run: |
          echo "Pipeline cancelled — destroying AWS resources..."
          terraform destroy -auto-approve